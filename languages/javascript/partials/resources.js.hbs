function handleRequest (client, path, method, body, options) {
  options = extend({}, client.options, options);

  var baseUri = template(options.baseUri, options.baseUriParameters);
  var hasBody = method !== 'GET' && method !== 'HEAD';
  var reqOpts = {};

  var reqBody = hasBody && body != null ? body : options.body;
  var reqQuery = !hasBody && body != null ? body : options.query;

  var reqOpts = extend(options, {
    url: baseUri.replace(/\/$/, '') + path,
    method: method,
    headers: extend({}, options.headers),
    body: reqBody,
    query: typeof reqQuery === 'object' ? extend({}, reqQuery) : reqQuery
  });

  if (options.user && typeof options.user.sign === 'function') {
    options.user.sign(reqOpts);
  }

  return client.request(reqOpts);
}

{{#each allResources}}
function {{pascalCase id}} (uri, client) {
  this._uri    = uri;
  this._client = client;

  {{#each children}}
  {{#unless uriParameters}}
  this.{{@key}} = new {{pascalCase id}}(uri + {{{stringify relativeUri}}}, client);
  {{/unless}}
  {{/each}}
};

{{#each children}}
{{#if uriParameters}}
{{pascalCase ../../id}}.prototype.{{@key}} = function (/* ...args */) {
  var uri = this._uri + template({{{stringify relativeUri}}}, arguments, {{{stringify (pluck uriParameters 'default')}}});

  return new {{pascalCase id}}(uri, this._client);
};
{{/if}}
{{/each}}

{{#each methods}}
{{pascalCase ../id}}.prototype.{{@key}} = function (body, options) {
  {{#if (keys headers)}}
  options = extend({}, options);
  options.headers = extend({{{stringify (object (keys headers) (pluck headers 'default'))}}}, options.headers);

  {{/if}}
  return handleRequest(this._client, this._uri, {{{stringify (upperCase method)}}}, body, options);
};
{{/each}}
{{/each}}

function CustomResource (uri, client) {
  this._uri    = uri;
  this._client = client;
}

{{#each supportedMethods}}
CustomResource.prototype.{{camelCase this}} = function (body, options) {
  return handleRequest(this._client, this._uri, {{{stringify (upperCase this)}}}, body, options);
};
{{/each}}
